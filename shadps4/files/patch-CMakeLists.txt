--- CMakeLists.txt.orig	2025-03-27 20:40:40 UTC
+++ CMakeLists.txt
@@ -14,6 +14,8 @@ if (NOT CMAKE_BUILD_TYPE)
 
 if (NOT CMAKE_BUILD_TYPE)
     set(CMAKE_BUILD_TYPE Release)
+else()
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O0 -g -fno-omit-frame-pointer -Wall -Wextra")
 endif()
 
 project(shadPS4 CXX C ASM ${ADDITIONAL_LANGUAGES})
@@ -33,7 +35,23 @@ option(ENABLE_UPDATER "Enables the options to updater"
 option(ENABLE_QT_GUI "Enable the Qt GUI. If not selected then the emulator uses a minimal SDL-based UI instead" OFF)
 option(ENABLE_DISCORD_RPC "Enable the Discord RPC integration" ON)
 option(ENABLE_UPDATER "Enables the options to updater" ON)
+option(ENABLE_SANITIZERS "Enable Address and Undefined Behavior Sanitizers" OFF)
 
+if(ENABLE_SANITIZERS)
+    message(STATUS "Sanitizers enabled")
+
+    # Set sanitizer flags
+    set(SANITIZER_FLAGS "-fsanitize=address,undefined -fno-omit-frame-pointer")
+
+    # Append to existing flags
+    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${SANITIZER_FLAGS}")
+    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${SANITIZER_FLAGS}")
+
+    # For linking as well
+    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${SANITIZER_FLAGS}")
+    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${SANITIZER_FLAGS}")
+endif()
+
 # First, determine whether to use CMAKE_OSX_ARCHITECTURES or CMAKE_SYSTEM_PROCESSOR.
 if (APPLE AND CMAKE_OSX_ARCHITECTURES)
     set(BASE_ARCHITECTURE "${CMAKE_OSX_ARCHITECTURES}")
@@ -54,7 +72,7 @@ if (ARCHITECTURE STREQUAL "x86_64")
 
 if (ARCHITECTURE STREQUAL "x86_64")
     # Set x86_64 target level to Sandy Bridge to generally match what is supported for PS4 guest code with CPU patches.
-    add_compile_options(-march=sandybridge)
+#    add_compile_options(-march=sandybridge)
 endif()
 
 if (APPLE AND ARCHITECTURE STREQUAL "x86_64" AND CMAKE_HOST_SYSTEM_PROCESSOR STREQUAL "arm64")
@@ -113,62 +131,62 @@ string(TIMESTAMP BUILD_DATE "%Y-%m-%d %H:%M:%S")
 git_branch_name(GIT_BRANCH)
 string(TIMESTAMP BUILD_DATE "%Y-%m-%d %H:%M:%S")
 
-message("start git things")
+#message("start git things")
 # Try to get the upstream remote and branch
-message("check for remote and branch")
-execute_process(
-  COMMAND git rev-parse --abbrev-ref --symbolic-full-name @{u}
-  OUTPUT_VARIABLE GIT_REMOTE_NAME
-  RESULT_VARIABLE GIT_REMOTE_RESULT
-  ERROR_QUIET
-  OUTPUT_STRIP_TRAILING_WHITESPACE
-)
+#message("check for remote and branch")
+#execute_process(
+#  COMMAND git rev-parse --abbrev-ref --symbolic-full-name @{u}
+#  OUTPUT_VARIABLE GIT_REMOTE_NAME
+#  RESULT_VARIABLE GIT_REMOTE_RESULT
+#  ERROR_QUIET
+#  OUTPUT_STRIP_TRAILING_WHITESPACE
+#)
 # If there's no upstream set or the command failed, check remote.pushDefault
-if (GIT_REMOTE_RESULT OR GIT_REMOTE_NAME STREQUAL "")
-  message("check default push")
-  execute_process(
-    COMMAND git config --get remote.pushDefault
-    OUTPUT_VARIABLE GIT_REMOTE_NAME
-    RESULT_VARIABLE GIT_REMOTE_RESULT
-    ERROR_QUIET
-    OUTPUT_STRIP_TRAILING_WHITESPACE
-  )
-endif()
+#if (GIT_REMOTE_RESULT OR GIT_REMOTE_NAME STREQUAL "")
+#  message("check default push")
+#  execute_process(
+#    COMMAND git config --get remote.pushDefault
+#    OUTPUT_VARIABLE GIT_REMOTE_NAME
+#    RESULT_VARIABLE GIT_REMOTE_RESULT
+#    ERROR_QUIET
+#    OUTPUT_STRIP_TRAILING_WHITESPACE
+#  )
+#endif()
 # If running in GitHub Actions and the above fails
-if (GIT_REMOTE_RESULT OR GIT_REMOTE_NAME STREQUAL "")
-  message("check github")
-  set(GIT_REMOTE_NAME "origin")
+#if (GIT_REMOTE_RESULT OR GIT_REMOTE_NAME STREQUAL "")
+#  message("check github")
+#  set(GIT_REMOTE_NAME "origin")
+#
+#  if (DEFINED ENV{GITHUB_HEAD_REF})  # PR branch name
+#    set(GIT_BRANCH "pr-$ENV{GITHUB_HEAD_REF}")
+#  elseif (DEFINED ENV{GITHUB_REF})  # Normal branch name
+#    string(REGEX REPLACE "^refs/[^/]*/" "" GIT_BRANCH "$ENV{GITHUB_REF}")
+#  else()
+#    message("couldn't find branch")
+#    set(GIT_BRANCH "detached-head")
+#  endif()
+#else()
+#  # Extract remote name if the output contains a remote/branch format
+#  string(FIND "${GIT_REMOTE_NAME}" "/" INDEX)
+#  if (INDEX GREATER -1)
+#    string(SUBSTRING "${GIT_REMOTE_NAME}" 0 "${INDEX}" GIT_REMOTE_NAME)
+#  else()
+#    # If no remote is present (only a branch name), default to origin
+#    set(GIT_REMOTE_NAME "origin")
+#  endif()
+#endif()
 
-  if (DEFINED ENV{GITHUB_HEAD_REF})  # PR branch name
-    set(GIT_BRANCH "pr-$ENV{GITHUB_HEAD_REF}")
-  elseif (DEFINED ENV{GITHUB_REF})  # Normal branch name
-    string(REGEX REPLACE "^refs/[^/]*/" "" GIT_BRANCH "$ENV{GITHUB_REF}")
-  else()
-    message("couldn't find branch")
-    set(GIT_BRANCH "detached-head")
-  endif()
-else()
-  # Extract remote name if the output contains a remote/branch format
-  string(FIND "${GIT_REMOTE_NAME}" "/" INDEX)
-  if (INDEX GREATER -1)
-    string(SUBSTRING "${GIT_REMOTE_NAME}" 0 "${INDEX}" GIT_REMOTE_NAME)
-  else()
-    # If no remote is present (only a branch name), default to origin
-    set(GIT_REMOTE_NAME "origin")
-  endif()
-endif()
-
 # Get remote link
-message("getting remote link")
-execute_process(
-  COMMAND git config --get remote.${GIT_REMOTE_NAME}.url
-  OUTPUT_VARIABLE GIT_REMOTE_URL
-  OUTPUT_STRIP_TRAILING_WHITESPACE
-)
+#message("getting remote link")
+#execute_process(
+#  COMMAND git config --get remote.${GIT_REMOTE_NAME}.url
+#  OUTPUT_VARIABLE GIT_REMOTE_URL
+#  OUTPUT_STRIP_TRAILING_WHITESPACE
+#)
 
 configure_file("${CMAKE_CURRENT_SOURCE_DIR}/src/common/scm_rev.cpp.in" "${CMAKE_CURRENT_BINARY_DIR}/src/common/scm_rev.cpp" @ONLY)
 
-message("end git things, remote: ${GIT_REMOTE_NAME}, branch: ${GIT_BRANCH}")
+#message("end git things, remote: ${GIT_REMOTE_NAME}, branch: ${GIT_BRANCH}")
 
 find_package(Boost 1.84.0 CONFIG)
 find_package(FFmpeg 5.1.2 MODULE)
@@ -1189,7 +1207,7 @@ install(TARGETS shadps4 BUNDLE DESTINATION .)
 # Install rules
 install(TARGETS shadps4 BUNDLE DESTINATION .)
 
-if (ENABLE_QT_GUI AND CMAKE_SYSTEM_NAME STREQUAL "Linux")
+if (ENABLE_QT_GUI AND CMAKE_SYSTEM_NAME STREQUAL "Linux" OR CMAKE_SYSTEM_NAME STREQUAL "FreeBSD")
     install(FILES "dist/net.shadps4.shadPS4.desktop" DESTINATION "share/applications")
     install(FILES "dist/net.shadps4.shadPS4.metainfo.xml" DESTINATION "share/metainfo")
     install(FILES ".github/shadps4.png" DESTINATION "share/icons/hicolor/512x512/apps" RENAME "net.shadps4.shadPS4.png")
