--- Engine/typesystem_engine.xml.orig	2020-12-31 15:49:49 UTC
+++ Engine/typesystem_engine.xml
@@ -1,8 +1,7 @@
 <?xml version="1.0"?>
 <!-- ***** BEGIN LICENSE BLOCK *****
-  - This file is part of Natron <https://natrongithub.github.io/>,
-  - Copyright (C) 2013-2018 INRIA and Alexandre Gauthier-Foichat
-  - Copyright (C) 2018-2020 The Natron developers
+  - This file is part of Natron <http://www.natron.fr/>,
+  - Copyright (C) 2016 INRIA and Alexandre Gauthier
   -
   - Natron is free software: you can redistribute it and/or modify
   - it under the terms of the GNU General Public License as published by
@@ -18,10 +17,10 @@
   - along with Natron.  If not, see <http://www.gnu.org/licenses/gpl-2.0.html>
    - ***** END LICENSE BLOCK ***** -->
 <typesystem package="NatronEngine">
-    
+
     <!--Load QtCore typesystem-->
     <load-typesystem name="typesystem_core.xml" generate="no" />
-    
+
     <!--Primitives-->
     <primitive-type name="bool"/>
     <primitive-type name="double"/>
@@ -38,8 +37,7 @@
     <primitive-type name="unsigned long"/>
     <primitive-type name="long long"/>
     <primitive-type name="unsigned long long"/>
-    <primitive-type name="std::string">
-    </primitive-type>
+    <primitive-type name="std::string"/>
     <primitive-type name="std::size_t" target-lang-api-name="PyLong">
         <conversion-rule>
             <native-to-target>
@@ -52,7 +50,7 @@
             </target-to-native>
         </conversion-rule>
     </primitive-type>
-    
+
     <!--std::pair from/to Python pair-->
     <container-type name="std::pair" type="pair">
         <include file-name="utility" location="global"/>
@@ -71,7 +69,7 @@
             </target-to-native>
         </conversion-rule>
     </container-type>
-    
+
     <!--Templates for type conversions used many times-->
     <template name="stdListToPyList">
         PyObject* %out = PyList_New((int) %in.size());
@@ -89,7 +87,7 @@
         %out.push_back(cppItem);
         }
     </template>
-    
+
     <template name="stdVectorToPyList">
         %INTYPE::size_type vectorSize = %in.size();
         PyObject* %out = PyList_New((int) vectorSize);
@@ -133,7 +131,7 @@
         }
     </template>
 
-    
+
     <!--std::list from/to Python list-->
     <container-type name="std::list" type="list">
         <include file-name="list" location="global"/>
@@ -148,7 +146,7 @@
             </target-to-native>
         </conversion-rule>
     </container-type>
-    
+
     <!--std::vector from/to Python list-->
     <container-type name="std::vector" type="vector">
         <include file-name="vector" location="global"/>
@@ -163,7 +161,7 @@
             </target-to-native>
         </conversion-rule>
     </container-type>
-    
+
     <!--std::set from/to Python map-->
     <container-type name="std::set" type="set">
         <include file-name="set" location="global"/>
@@ -193,7 +191,7 @@
             </target-to-native>
         </conversion-rule>
     </container-type>
-    
+
     <!--std::multimap from/to Python map-->
     <container-type name="std::multimap" type="multi-map">
         <include file-name="map" location="global"/>
@@ -209,69 +207,59 @@
         </conversion-rule>
     </container-type>
 
-     <!--Natron global enums-->
-    <namespace-type name="NATRON_NAMESPACE">
-    <enum-type name="StatusEnum"/>
-    <enum-type name="MergingFunctionEnum"/>
-    <enum-type name="StandardButtonEnum" flags="StandardButtons"/>
-    <enum-type name="KeyframeTypeEnum"/>
-    <enum-type name="PixmapEnum"/>
-    <enum-type name="ValueChangedReasonEnum"/>
-    <enum-type name="AnimationLevelEnum"/>
-    <enum-type name="ImageBitDepthEnum"/>
-    <enum-type name="ImagePremultiplicationEnum"/>
-    <enum-type name="ViewerCompositingOperatorEnum"/>
-    <enum-type name="ViewerColorSpaceEnum"/>
-    <enum-type name="OrientationEnum"/>
-    <enum-type name="PlaybackModeEnum"/>
-    <enum-type name="DisplayChannelsEnum"/>
-    </namespace-type>
-    
-   
-   <object-type name="RectI">
-       <modify-function signature="operator=(RectI)" remove="all"/>
-       <modify-function signature="upscalePowerOfTwo(unsigned int)const" remove="all"/>
-       <modify-function signature="downscalePowerOfTwo(unsigned int)const" remove="all"/>
-       <modify-function signature="roundPowerOfTwoLargestEnclosed(unsigned int)const" remove="all"/>
-       <modify-function signature="roundPowerOfTwoSmallestEnclosing(unsigned int)const" remove="all"/>
-       <modify-function signature="downscalePowerOfTwoLargestEnclosed(unsigned int)const" remove="all"/>
-       <modify-function signature="downscalePowerOfTwoSmallestEnclosing(unsigned int)const" remove="all"/>
-       <modify-function signature="toCanonical(unsigned int,double,RectD,RectD*)const" remove="all"/>
-       <modify-function signature="toCanonical_noClipping(unsigned int,double,RectD*)const" remove="all"/>
-       <modify-function signature="debug()const" remove="all"/>
-       <modify-function signature="splitIntoSmallerRects(int)const" remove="all"/>
-       <modify-function signature="intersect(RectI,RectI*)const">
-           <modify-argument index="2">
-               <remove-argument/>
-           </modify-argument>
-           <modify-argument index="return">
-               <replace-type modified-type="RectI"/>
-           </modify-argument>
-           <inject-code class="target" position="beginning">
-               RectI t;
-               %CPPSELF.%FUNCTION_NAME(%1,&amp;t);
-               %PYARG_0 = %CONVERTTOPYTHON[RectI](t);
-               return %PYARG_0;
-           </inject-code>
-       </modify-function>
-       <modify-function signature="intersect(int,int,int,int,RectI*)const">
-           <modify-argument index="5">
-               <remove-argument/>
-           </modify-argument>
-           <modify-argument index="return">
-               <replace-type modified-type="RectI"/>
-           </modify-argument>
-           <inject-code class="target" position="beginning">
-               RectI t;
-               %CPPSELF.%FUNCTION_NAME(%1,%2,%3,%4,&amp;t);
-               %PYARG_0 = %CONVERTTOPYTHON[RectI](t);
-               return %PYARG_0;
-           </inject-code>
-       </modify-function>
-   </object-type>
+    <!--Natron global enums-->
+	<namespace-type name="Natron" generate="yes">
+		<enum-type name="ActionRetCodeEnum"/>
+		<enum-type name="MergingFunctionEnum"/>
+		<enum-type name="StandardButtonEnum" flags="StandardButtons"/>
+		<enum-type name="KeyframeTypeEnum"/>
+		<enum-type name="PixmapEnum"/>
+		<enum-type name="AnimationLevelEnum"/>
+		<enum-type name="ImageBitDepthEnum"/>
+		<enum-type name="ImagePremultiplicationEnum"/>
+		<enum-type name="OrientationEnum"/>
+		<enum-type name="RotoStrokeType"/>
+		<enum-type name="PenType"/>
+		<enum-type name="ViewerContextLayoutTypeEnum"/>
+		<enum-type name="TableChangeReasonEnum"/>
 
-   <object-type name="ExprUtils">
-       <modify-function signature="noise(Double2DTuple)">
+		<object-type name="RectI">
+			<modify-function signature="operator=(Natron::RectI)" remove="all"/>
+			<modify-function signature="upscalePowerOfTwo(unsigned int)const" remove="all"/>
+			<modify-function signature="downscalePowerOfTwo(unsigned int)const" remove="all"/>
+			<modify-function signature="roundPowerOfTwoLargestEnclosed(unsigned int)const" remove="all"/>
+			<modify-function signature="roundPowerOfTwoSmallestEnclosing(unsigned int)const" remove="all"/>
+			<modify-function signature="downscalePowerOfTwoLargestEnclosed(unsigned int)const" remove="all"/>
+			<modify-function signature="downscalePowerOfTwoSmallestEnclosing(unsigned int)const" remove="all"/>
+			<modify-function signature="toCanonical(unsigned int,double,Natron::RectD,Natron::RectD*)const" remove="all"/>
+			<modify-function signature="toCanonical_noClipping(unsigned int,double,Natron::RectD*)const" remove="all"/>
+			<modify-function signature="debug()const" remove="all"/>
+			<modify-function signature="splitIntoSmallerRects(int)const" remove="all"/>
+		</object-type>
+
+		<object-type name="RectD">
+			<modify-function signature="operator=(Natron::RectD)" remove="all"/>
+			<modify-function signature="debug()const" remove="all"/>
+			<modify-function signature="toPixelEnclosing(unsigned int,double,Natron::RectI*)const" remove="all"/>
+		</object-type>
+	</namespace-type>
+
+	<namespace-type name="Natron::Python" generate="no">
+		<modify-function signature="PyStringToStdString(PyObject*)" remove="all"/>
+		<modify-function signature="clearPythonStdErr()" remove="all"/>
+		<modify-function signature="clearPythonStdOut()" remove="all"/>
+		<modify-function signature="getAttrRecursive(std::string, PyObject*, bool*)" remove="all"/>
+		<modify-function signature="getFunctionArguments(std::string, std::string*, std::vector&lt;std::string&gt;*)" remove="all"/>
+		<modify-function signature="getGroupInfos(std::string,std::string*,std::string*,std::string*,std::string*,std::string*,std::string*,bool*,uint*)" remove="all"/>
+		<modify-function signature="getMainModule()" remove="all"/>
+		<modify-function signature="getPythonStdErr()" remove="all"/>
+		<modify-function signature="getPythonStdOut()" remove="all"/>
+		<modify-function signature="interpretPythonScript(std::string, std::string*, std::string*)" remove="all"/>
+		<modify-function signature="makeNameScriptFriendly(std::string)" remove="all"/>
+		<modify-function signature="makeNameScriptFriendlyWithDots(std::string)" remove="all"/>
+
+	<object-type name="ExprUtils">
+       <modify-function signature="noise(Natron::Python::Double2DTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -286,18 +274,18 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                if (tupleSize == 2) {
                 double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
-                Double2DTuple p = {x1, x2};
+                Natron::Python::Double2DTuple p = {x1, x2};
                 ret = %CPPSELF.%FUNCTION_NAME(p);
                } else if (tupleSize == 3) {
                 double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                 double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-                Double3DTuple p = {x1, x2, x3};
+                Natron::Python::Double3DTuple p = {x1, x2, x3};
                 ret = %CPPSELF.%FUNCTION_NAME(p);
                } else if (tupleSize == 4) {
                 double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                 double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
                 double x4 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 3));
-                ColorTuple p = {x1, x2, x3, x4};
+                Natron::Python::ColorTuple p = {x1, x2, x3, x4};
                 ret = %CPPSELF.%FUNCTION_NAME(p);
                }
                %PYARG_0 = %CONVERTTOPYTHON[double](ret);
@@ -306,9 +294,9 @@
            </inject-code>
 
        </modify-function>
-       <modify-function signature="noise(Double3DTuple)" remove="all"/>
-       <modify-function signature="noise(ColorTuple)" remove="all"/>
-       <modify-function signature="snoise(Double3DTuple)">
+       <modify-function signature="noise(Natron::Python::Double3DTuple)" remove="all"/>
+       <modify-function signature="noise(Natron::Python::ColorTuple)" remove="all"/>
+       <modify-function signature="snoise(Natron::Python::Double3DTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -321,13 +309,13 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
                double ret = %CPPSELF.%FUNCTION_NAME(p);
                %PYARG_0 = %CONVERTTOPYTHON[double](ret);
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="vnoise(Double3DTuple)">
+       <modify-function signature="vnoise(Natron::Python::Double3DTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -343,8 +331,8 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -352,7 +340,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="cnoise(Double3DTuple)">
+       <modify-function signature="cnoise(Natron::Python::Double3DTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -368,8 +356,8 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -377,7 +365,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="snoise4(ColorTuple)">
+       <modify-function signature="snoise4(Natron::Python::ColorTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -391,13 +379,13 @@
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
                double x4 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 3));
-               ColorTuple p = {x1, x2, x3, x4};
+               Natron::Python::ColorTuple p = {x1, x2, x3, x4};
                double ret = %CPPSELF.%FUNCTION_NAME(p);
                %PYARG_0 = %CONVERTTOPYTHON[double](ret);
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="vnoise4(ColorTuple)">
+       <modify-function signature="vnoise4(Natron::Python::ColorTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -414,8 +402,8 @@
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
                double x4 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 3));
-               ColorTuple p = {x1, x2, x3, x4};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
+               Natron::Python::ColorTuple p = {x1, x2, x3, x4};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -423,7 +411,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="cnoise4(ColorTuple)">
+       <modify-function signature="cnoise4(Natron::Python::ColorTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -440,8 +428,8 @@
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
                double x4 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 3));
-               ColorTuple p = {x1, x2, x3, x4};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
+               Natron::Python::ColorTuple p = {x1, x2, x3, x4};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -449,7 +437,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="turbulence(Double3DTuple,int,double,double)">
+       <modify-function signature="turbulence(Natron::Python::Double3DTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -462,13 +450,13 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
                double ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = %CONVERTTOPYTHON[double](ret);
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="vturbulence(Double3DTuple,int,double,double)">
+       <modify-function signature="vturbulence(Natron::Python::Double3DTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -484,8 +472,8 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -493,7 +481,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="cturbulence(Double3DTuple,int,double,double)">
+       <modify-function signature="cturbulence(Natron::Python::Double3DTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -509,8 +497,8 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -518,7 +506,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="fbm(Double3DTuple,int,double,double)">
+       <modify-function signature="fbm(Natron::Python::Double3DTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -531,13 +519,13 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
                double ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = %CONVERTTOPYTHON[double](ret);
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="vfbm(Double3DTuple,int,double,double)">
+       <modify-function signature="vfbm(Natron::Python::Double3DTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -553,8 +541,8 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -562,7 +550,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="fbm4(ColorTuple,int,double,double)">
+       <modify-function signature="fbm4(Natron::Python::ColorTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -576,13 +564,13 @@
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
                double x4 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 3));
-               ColorTuple p = {x1, x2, x3, x4};
+               Natron::Python::ColorTuple p = {x1, x2, x3, x4};
                double ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = %CONVERTTOPYTHON[double](ret);
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="vfbm4(ColorTuple,int,double,double)">
+       <modify-function signature="vfbm4(Natron::Python::ColorTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -599,8 +587,8 @@
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
                double x4 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 3));
-               ColorTuple p = {x1, x2, x3, x4};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
+               Natron::Python::ColorTuple p = {x1, x2, x3, x4};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -608,7 +596,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="cfbm(Double3DTuple,int,double,double)">
+       <modify-function signature="cfbm(Natron::Python::Double3DTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -624,8 +612,8 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -633,7 +621,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="cfbm4(ColorTuple,int,double,double)">
+       <modify-function signature="cfbm4(Natron::Python::ColorTuple,int,double,double)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -650,8 +638,8 @@
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
                double x4 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 3));
-               ColorTuple p = {x1, x2, x3, x4};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
+               Natron::Python::ColorTuple p = {x1, x2, x3, x4};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p, %2, %3, %4);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -659,7 +647,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="cellnoise(Double3DTuple)">
+       <modify-function signature="cellnoise(Natron::Python::Double3DTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -672,13 +660,13 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
                double ret = %CPPSELF.%FUNCTION_NAME(p);
                %PYARG_0 = %CONVERTTOPYTHON[double](ret);
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="ccellnoise(Double3DTuple)">
+       <modify-function signature="ccellnoise(Natron::Python::Double3DTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -694,8 +682,8 @@
                double x1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 0));
                double x2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 1));
                double x3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_1, 2));
-               Double3DTuple p = {x1, x2, x3};
-               Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple ret = %CPPSELF.%FUNCTION_NAME(p);
                %PYARG_0 = PyTuple_New(3);
                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[double](ret.x));
                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](ret.y));
@@ -703,7 +691,7 @@
                return %PYARG_0;
            </inject-code>
        </modify-function>
-       <modify-function signature="pnoise(Double3DTuple,Double3DTuple)">
+       <modify-function signature="pnoise(Natron::Python::Double3DTuple,Natron::Python::Double3DTuple)">
            <modify-argument index="1">
                <replace-type modified-type="PyObject"/>
            </modify-argument>
@@ -727,8 +715,8 @@
                double p1 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_2, 0));
                double p2 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_2, 1));
                double p3 = %CONVERTTOCPP[double](PyTuple_GET_ITEM(%PYARG_2, 2));
-               Double3DTuple p = {x1, x2, x3};
-               Double3DTuple period = {p1, p2, p3};
+               Natron::Python::Double3DTuple p = {x1, x2, x3};
+               Natron::Python::Double3DTuple period = {p1, p2, p3};
                double ret = %CPPSELF.%FUNCTION_NAME(p, period);
                %PYARG_0 = %CONVERTTOPYTHON[double](ret);
                return %PYARG_0;
@@ -736,44 +724,10 @@
        </modify-function>
 
    </object-type>
-   <object-type name="RectD">
-       <modify-function signature="operator=(RectD)" remove="all"/>
-       <modify-function signature="debug()const" remove="all"/>
-       <modify-function signature="toPixelEnclosing(unsigned int,double,RectI*)const" remove="all"/>
-       <modify-function signature="intersect(RectD,RectD*)const">
-           <modify-argument index="2">
-               <remove-argument/>
-           </modify-argument>
-           <modify-argument index="return">
-               <replace-type modified-type="RectD"/>
-           </modify-argument>
-           <inject-code class="target" position="beginning">
-               RectD t;
-               %CPPSELF.%FUNCTION_NAME(%1,&amp;t);
-               %PYARG_0 = %CONVERTTOPYTHON[RectD](t);
-               return %PYARG_0;
-           </inject-code>
-       </modify-function>
-       <modify-function signature="intersect(double,double,double,double,RectD*)const">
-           <modify-argument index="5">
-               <remove-argument/>
-           </modify-argument>
-           <modify-argument index="return">
-               <replace-type modified-type="RectD"/>
-           </modify-argument>
-           <inject-code class="target" position="beginning">
-               RectD t;
-               %CPPSELF.%FUNCTION_NAME(%1,%2,%3,%4,&amp;t);
-               %PYARG_0 = %CONVERTTOPYTHON[RectD](t);
-               return %PYARG_0;
-           </inject-code>
-       </modify-function>
-       
-   </object-type>
 
-    <value-type name="ImageLayer" copyable="true" hash-function="ImageLayer::getHash">
+    <value-type name="ImageLayer" copyable="true" hash-function="Natron::Python::ImageLayer::getHash">
     </value-type>
-    
+
     <object-type name="Group" copyable="false">
         <inject-documentation format="target">
             This is an abstract class, it is derived by 2 different classes:
@@ -787,32 +741,29 @@
         </modify-function>
         <modify-function signature="getChildren()const">
             <inject-code class="target" position="beginning">
-                std::list&lt;Effect*&gt; effects = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
+                std::list&lt;Natron::Python::Effect*&gt; effects = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
                 PyObject* ret = PyList_New((int) effects.size());
                 int idx = 0;
-                for (std::list&lt;Effect*&gt;::iterator it = effects.begin(); it!=effects.end(); ++it,++idx) {
-                PyObject* item = %CONVERTTOPYTHON[Effect*](*it);
+                for (std::list&lt;Natron::Python::Effect*&gt;::iterator it = effects.begin(); it!=effects.end(); ++it,++idx) {
+                PyObject* item = %CONVERTTOPYTHON[Natron::Python::Effect*](*it);
                 // Ownership transferences.
                 Shiboken::Object::getOwnership(item);
                 PyList_SET_ITEM(ret, idx, item);
                 }
                 return ret;
             </inject-code>
-            
+
         </modify-function>
     </object-type>
-    <object-type name="NodeCreationProperty">
-    </object-type>
-    <object-type name="IntNodeCreationProperty">
-    </object-type>
-    <object-type name="BoolNodeCreationProperty">
-    </object-type>
-    <object-type name="FloatNodeCreationProperty">
-    </object-type>
-    <object-type name="StringNodeCreationProperty">
-    </object-type>
-    <object-type name="App" copyable="false">
-        <modify-function signature="createNode(QString,int,Group*, std::map&lt; QString, NodeCreationProperty* &gt;)const">
+
+    <object-type name="NodeCreationProperty"/>
+    <object-type name="IntNodeCreationProperty"/>
+    <object-type name="BoolNodeCreationProperty"/>
+    <object-type name="FloatNodeCreationProperty"/>
+    <object-type name="StringNodeCreationProperty"/>
+
+	<object-type name="App" copyable="false">
+        <modify-function signature="createNode(QString,int,Natron::Python::Group*, std::map&lt; QString, Natron::Python::NodeCreationProperty* &gt;)const">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
@@ -821,7 +772,7 @@
                 %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
             </inject-code>
         </modify-function>
-        <modify-function signature="createReader(QString,Group*,std::map&lt; QString, NodeCreationProperty* &gt;)const">
+        <modify-function signature="createReader(QString,Natron::Python::Group*,std::map&lt; QString, Natron::Python::NodeCreationProperty* &gt;)const">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
@@ -830,7 +781,7 @@
                 %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
             </inject-code>
         </modify-function>
-        <modify-function signature="createWriter(QString,Group*, std::map&lt;QString, NodeCreationProperty* &gt;)const">
+        <modify-function signature="createWriter(QString,Natron::Python::Group*, std::map&lt;QString, Natron::Python::NodeCreationProperty* &gt;)const">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
@@ -844,9 +795,9 @@
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
         </modify-function>
-        <modify-function signature="renderInternal(bool,std::list&lt;Effect*&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;)" remove="all"/>
-        <modify-function signature="renderInternal(bool,Effect*,int,int,int)" remove="all"/>
-        <modify-function signature="render(std::list&lt;Effect*&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;)">
+        <modify-function signature="renderInternal(bool,std::list&lt;Natron::Python::Effect*&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;)" remove="all"/>
+        <modify-function signature="renderInternal(bool,Natron::Python::Effect*,int,int,int)" remove="all"/>
+        <modify-function signature="render(std::list&lt;Natron::Python::Effect*&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;,std::list&lt;int&gt;)">
             <modify-argument index="1">
                 <replace-type modified-type="PyList"/>
             </modify-argument>
@@ -864,14 +815,14 @@
                     PyErr_SetString(PyExc_TypeError, "tasks must be a list of tuple objects.");
                     return 0;
                 }
-                std::list&lt;Effect*&gt; effects;
-                
+                std::list&lt;Natron::Python::Effect*&gt; effects;
+
                 std::list&lt;int&gt; firstFrames;
-                
+
                 std::list&lt;int&gt; lastFrames;
-                
+
                 std::list&lt;int&gt; frameSteps;
-                
+
                 int size = (int)PyList_GET_SIZE(%PYARG_1);
                 for (int i = 0; i &lt; size; ++i) {
                     PyObject* tuple = PyList_GET_ITEM(%PYARG_1,i);
@@ -879,13 +830,13 @@
                         PyErr_SetString(PyExc_TypeError, "tasks must be a list of tuple objects.");
                         return 0;
                     }
-                    
+
                     int tupleSize = PyTuple_GET_SIZE(tuple);
                     if (tupleSize != 4 &amp;&amp; tupleSize != 3) {
                         PyErr_SetString(PyExc_TypeError, "the tuple must have 3 or 4 items.");
                         return 0;
                     }
-                    Effect* writeNode = %CONVERTTOCPP[Effect*](PyTuple_GET_ITEM(tuple, 0));
+                    Natron::Python::Effect* writeNode = %CONVERTTOCPP[Natron::Python::Effect*](PyTuple_GET_ITEM(tuple, 0));
                     int firstFrame = %CONVERTTOCPP[int](PyTuple_GET_ITEM(tuple, 1));
                     int lastFrame = %CONVERTTOCPP[int](PyTuple_GET_ITEM(tuple, 2));
                     int frameStep;
@@ -899,7 +850,7 @@
                     lastFrames.push_back(lastFrame);
                     frameSteps.push_back(frameStep);
                 }
-                
+
                 %CPPSELF.%FUNCTION_NAME(effects,firstFrames,lastFrames, frameSteps);
             </inject-code>
         </modify-function>
@@ -922,7 +873,7 @@
             </inject-code>
         </modify-function>
     </object-type>
-    
+
     <object-type name="UserParamHolder" copyable="false">
     	<modify-function signature="createIntParam(QString,QString)">
             <modify-argument index="return">
@@ -1014,20 +965,19 @@
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
         </modify-function>
-        <modify-function signature="refreshUserParamsGUI()">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME();
-            </inject-code>
-        </modify-function>
     </object-type>
-        
+
     <object-type name="Effect" copyable="false">
         <inject-documentation format="target">
             This object represents a single node in Natron, that is, an instance of a plug-in.
             You cannot create Effects directly by calling their constructor, instead you must use the
             function :doc:`App.createNode` to create them.
         </inject-documentation>
-        
+        <modify-function signature="getContainerGroup()const">
+            <modify-argument index="return">
+                <define-ownership class="target" owner="target"/>
+            </modify-argument>
+        </modify-function>
         <modify-function signature="getInput(int)const">
             <inject-documentation format="target">
                 Returns the node at the given input.
@@ -1051,11 +1001,11 @@
         </modify-function>
         <modify-function signature="getParams()const">
             <inject-code class="target" position="beginning">
-                std::list&lt;Param*&gt; params = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
+                std::list&lt;Natron::Python::Param*&gt; params = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
                 PyObject* ret = PyList_New((int) params.size());
                 int idx = 0;
-                for (std::list&lt;Param*&gt;::iterator it = params.begin(); it!=params.end(); ++it,++idx) {
-                    PyObject* item = %CONVERTTOPYTHON[Param*](*it);
+                for (std::list&lt;Natron::Python::Param*&gt;::iterator it = params.begin(); it!=params.end(); ++it,++idx) {
+                    PyObject* item = %CONVERTTOPYTHON[Natron::Python::Param*](*it);
                     // Ownership transferences.
                     Shiboken::Object::getOwnership(item);
                     PyList_SET_ITEM(ret, idx, item);
@@ -1063,16 +1013,6 @@
                 return ret;
             </inject-code>
         </modify-function>
-        <modify-function signature="destroy(bool)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="setLabel(QString)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1);
-            </inject-code>
-        </modify-function>
         <modify-function signature="setScriptName(QString)">
             <inject-code class="target" position="beginning">
                 %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME(%1);
@@ -1117,7 +1057,7 @@
                 PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](y));
                 return %PYARG_0;
             </inject-code>
-            
+
         </modify-function>
         <modify-function signature="getColor(double*,double*,double*)const">
             <modify-argument index="1">
@@ -1141,21 +1081,21 @@
                 PyTuple_SET_ITEM(%PYARG_0, 2, %CONVERTTOPYTHON[double](b));
                 return %PYARG_0;
             </inject-code>
-            
+
         </modify-function>
         <!-- It doesn't seem that Shiboken allows to remove an overload:
          signature 'getNode(QString)const' for function modification in 'Effect' not found. Possible candidates: getNode(QString)const in Group
          -->
         <!--<modify-function signature="getNode(QString)const" remove="all">
         </modify-function>-->
-        
+
         <modify-function signature="getUserPageParam()const">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
         </modify-function>
 
-        <modify-function signature="connectInput(int,const Effect*)">
+        <modify-function signature="connectInput(int,const Natron::Python::Effect*)">
             <inject-code class="target" position="beginning">
                 %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME(%1,%2);
                 %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
@@ -1166,19 +1106,27 @@
                 %CPPSELF.%FUNCTION_NAME(%1);
             </inject-code>
         </modify-function>
-        <modify-function signature="getRotoContext()const">
+        <modify-function signature="getItemsTable(QString)const">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
         </modify-function>
-        <modify-function signature="getTrackerContext()const">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
+        <modify-function signature="getAllItemsTable()const">
+            <inject-code class="target" position="beginning">
+                std::list&lt;Natron::Python::ItemsTable*&gt; tables = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
+                PyObject* ret = PyList_New((int) tables.size());
+                int idx = 0;
+                for (std::list&lt;Natron::Python::ItemsTable*&gt;::iterator it = tables.begin(); it!=tables.end(); ++it,++idx) {
+                PyObject* item = %CONVERTTOPYTHON[Natron::Python::ItemsTable*](*it);
+                // Ownership transferences.
+                Shiboken::Object::getOwnership(item);
+                PyList_SET_ITEM(ret, idx, item);
+                }
+                return ret;
+            </inject-code>
         </modify-function>
     </object-type>
 
-    
     <object-type name="AppSettings">
         <modify-function signature="getParam(QString)const">
             <modify-argument index="return">
@@ -1187,11 +1135,11 @@
         </modify-function>
         <modify-function signature="getParams()const">
             <inject-code class="target" position="beginning">
-                std::list&lt;Param*&gt; params = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
+                std::list&lt;Natron::Python::Param*&gt; params = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
                 PyObject* ret = PyList_New((int) params.size());
                 int idx = 0;
-                for (std::list&lt;Param*&gt;::iterator it = params.begin(); it!=params.end(); ++it,++idx) {
-                PyObject* item = %CONVERTTOPYTHON[Param*](*it);
+                for (std::list&lt;Natron::Python::Param*&gt;::iterator it = params.begin(); it!=params.end(); ++it,++idx) {
+                PyObject* item = %CONVERTTOPYTHON[Natron::Python::Param*](*it);
                 // Ownership transferences.
                 Shiboken::Object::getOwnership(item);
                 PyList_SET_ITEM(ret, idx, item);
@@ -1200,24 +1148,38 @@
             </inject-code>
         </modify-function>
     </object-type>
-    
-    
-    
+
     <object-type name="Param">
         <modify-function signature="getParent()const">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
         </modify-function>
+        <modify-function signature="getParentEffect()const">
+            <modify-argument index="return">
+                <define-ownership class="target" owner="target"/>
+            </modify-argument>
+        </modify-function>
+        <modify-function signature="getParentItemBase()const">
+            <modify-argument index="return">
+                <define-ownership class="target" owner="target"/>
+            </modify-argument>
+        </modify-function>
+        <modify-function signature="getApp()const">
+            <modify-argument index="return">
+                <define-ownership class="target" owner="target"/>
+            </modify-argument>
+        </modify-function>
     </object-type>
+
     <object-type name="AnimatedParam">
-        <modify-function signature="setExpression(QString,bool,int)">
+        <modify-function signature="setExpression(QString,bool,int,QString)">
             <inject-code class="target" position="beginning">
                 %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME(%1,%2,%3);
                 %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
             </inject-code>
         </modify-function>
-        <modify-function signature="getKeyTime(int,int,double*)const">
+        <modify-function signature="getKeyTime(int,int,double*,QString)const">
             <modify-argument index="3">
                 <remove-argument/>
             </modify-argument>
@@ -1233,7 +1195,7 @@
                 return %PYARG_0;
             </inject-code>
         </modify-function>
-        <modify-function signature="getExpression(int,bool*)const">
+        <modify-function signature="getExpression(int,bool*,QString)const">
             <modify-argument index="2">
                 <remove-argument/>
             </modify-argument>
@@ -1250,33 +1212,10 @@
             </inject-code>
         </modify-function>
     </object-type>
+
     <object-type name="IntParam">
-        <modify-function signature="set(int)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="set(int,double)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="setValue(int,int)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="setValueAtTime(int,double,int)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2,%3);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="restoreDefaultValue(int)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1);
-            </inject-code>
-        </modify-function>
     </object-type>
+
     <object-type name="Int2DTuple">
         <add-function signature="__getitem__(int)"  return-type="PyObject*">
             <inject-code class="target" position="beginning">
@@ -1298,18 +1237,10 @@
             </inject-code>
         </add-function>
     </object-type>
+
     <object-type name="Int2DParam">
-        <modify-function signature="set(int,int)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="set(int,int,double)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2,%3);
-            </inject-code>
-        </modify-function>
     </object-type>
+
     <object-type name="Int3DTuple">
         <add-function signature="__getitem__(int)"  return-type="PyObject*">
             <inject-code class="target" position="beginning">
@@ -1334,20 +1265,13 @@
             </inject-code>
         </add-function>
     </object-type>
+
     <object-type name="Int3DParam">
-        <modify-function signature="set(int,int,int)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2,%3);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="set(int,int,int,double)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2,%3,%4);
-            </inject-code>
-        </modify-function>
     </object-type>
+
     <object-type name="DoubleParam">
     </object-type>
+
     <object-type name="Double2DTuple">
         <add-function signature="__getitem__(int)"  return-type="PyObject*">
             <inject-code class="target" position="beginning">
@@ -1369,8 +1293,10 @@
             </inject-code>
         </add-function>
     </object-type>
+
     <object-type name="Double2DParam">
     </object-type>
+
     <object-type name="Double3DTuple">
         <add-function signature="__getitem__(int)"  return-type="PyObject*">
             <inject-code class="target" position="beginning">
@@ -1395,18 +1321,10 @@
             </inject-code>
         </add-function>
     </object-type>
+
     <object-type name="Double3DParam">
-        <modify-function signature="set(double,double,double)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2,%3);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="set(double,double,double,double)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2,%3,%4);
-            </inject-code>
-        </modify-function>
     </object-type>
+
     <object-type name="ColorTuple">
         <add-function signature="__getitem__(int)"  return-type="PyObject*">
             <inject-code class="target" position="beginning">
@@ -1435,21 +1353,123 @@
             </inject-code>
         </add-function>
     </object-type>
+
     <object-type name="ColorParam">
     </object-type>
+
     <object-type name="BooleanParam">
     </object-type>
+
     <object-type name="ChoiceParam">
+        <modify-function signature="setOptions(std::list&lt;QString&gt;,std::list&lt;QString&gt;,std::list&lt;QString&gt;)">
+            <modify-argument index="1">
+                <replace-type modified-type="PySequence"/>
+            </modify-argument>
+            <modify-argument index="2">
+                <remove-argument/>
+            </modify-argument>
+            <modify-argument index="3">
+                <remove-argument/>
+            </modify-argument>
+            <inject-code class="target" position="beginning">
+
+                if (!PyList_Check(%1)) {
+                    PyErr_SetString(PyExc_ValueError, "Argument must be a list of tuples");
+                    return 0;
+                }
+
+                int listSize = PyList_Size(%1);
+                if (listSize == 0) {
+                    PyErr_SetString(PyExc_ValueError, "Argument must be a list of tuples");
+                    return 0;
+                }
+
+                std::list&lt;QString&gt; optionIDs, optionLabels, optionHelps;
+                for (int i = 0; i &lt; listSize; ++i) {
+                    PyObject* obj = PyList_GetItem(%1, i);
+                    if (!PyTuple_Check(obj)) {
+                        PyErr_SetString(PyExc_ValueError, "Argument must be a list of tuples");
+                        return 0;
+                    }
+                    int tupleSize = PyTuple_Size(obj);
+                    if (tupleSize != 3) {
+                        PyErr_SetString(PyExc_ValueError, "Each option must be a tuple of 3 strings");
+                        return 0;
+                    }
+                    PyObject* pyOptionId = PyTuple_GetItem(obj, 0);
+                    PyObject* pyOptionLabel = PyTuple_GetItem(obj, 1);
+                    PyObject* pyOptionHnt = PyTuple_GetItem(obj, 2);
+                    QString optionId = %CONVERTTOCPP[QString](pyOptionId);
+                    QString optionLabel = %CONVERTTOCPP[QString](pyOptionLabel);
+                    QString optionHint = %CONVERTTOCPP[QString](pyOptionHnt);
+                    optionIDs.push_back(optionId);
+                    optionLabels.push_back(optionLabel);
+                    optionHelps.push_back(optionHint);
+                }
+
+                %CPPSELF.%FUNCTION_NAME(optionIDs, optionLabels, optionHelps);
+
+            </inject-code>
+        </modify-function>
+        <modify-function signature="getOption(int,QString*,QString*,QString*)const">
+            <modify-argument index="2">
+                <remove-argument/>
+            </modify-argument>
+            <modify-argument index="3">
+                <remove-argument/>
+            </modify-argument>
+            <modify-argument index="4">
+                <remove-argument/>
+            </modify-argument>
+            <modify-argument index="return">
+                <replace-type modified-type="PyTuple"/>
+            </modify-argument>
+            <inject-code class="target" position="beginning">
+                QString optionID, optionLabel, optionHint;
+                bool ok = %CPPSELF.%FUNCTION_NAME(%1, &amp;optionID,&amp;optionLabel, &amp;optionHint);
+                %PYARG_0 = PyTuple_New(4);
+                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[bool](ok));
+                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[QString](optionID));
+                PyTuple_SET_ITEM(%PYARG_0, 2, %CONVERTTOPYTHON[QString](optionLabel));
+                PyTuple_SET_ITEM(%PYARG_0, 3, %CONVERTTOPYTHON[QString](optionHint));
+                return %PYARG_0;
+            </inject-code>
+        </modify-function>
+        <modify-function signature="getActiveOption(QString*,QString*,QString*,QString)const">
+            <modify-argument index="1">
+                <remove-argument/>
+            </modify-argument>
+            <modify-argument index="2">
+                <remove-argument/>
+            </modify-argument>
+            <modify-argument index="3">
+                <remove-argument/>
+            </modify-argument>
+            <modify-argument index="return">
+                <replace-type modified-type="PyTuple"/>
+            </modify-argument>
+            <inject-code class="target" position="beginning">
+                QString optionID, optionLabel, optionHint;
+                %CPPSELF.%FUNCTION_NAME(&amp;optionID,&amp;optionLabel, &amp;optionHint, %4);
+                %PYARG_0 = PyTuple_New(3);
+                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[QString](optionID));
+                PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[QString](optionLabel));
+                PyTuple_SET_ITEM(%PYARG_0, 2, %CONVERTTOPYTHON[QString](optionHint));
+                return %PYARG_0;
+            </inject-code>
+        </modify-function>
     </object-type>
+
     <object-type name="ButtonParam"/>
     <object-type name="SeparatorParam"/>
-    <object-type name="StringParamBase">
-    </object-type>
+    <object-type name="StringParamBase"/>
+
     <object-type name="StringParam">
         <enum-type name="TypeEnum"/>
     </object-type>
+
     <object-type name="FileParam"/>
-    <object-type name="OutputFileParam"/>
+
     <object-type name="PathParam">
         <modify-function signature="getTable(std::list&lt;std::vector&lt;std::string&gt; &gt;*)const">
             <modify-argument index="1">
@@ -1467,14 +1487,14 @@
 
                 std::size_t i = 0;
                 for (std::list&lt;std::vector&lt;std::string&gt; &gt;::iterator it = table.begin(); it != table.end(); ++it, ++i) {
-                std::size_t subListSize = it->size();
-                PyObject* subList = PyList_New((int) subListSize);
-                for (std::size_t j = 0; j &lt; subListSize; ++j) {
-                std::string cppItem = (*it)[j];
-                PyList_SET_ITEM(subList, j, %CONVERTTOPYTHON[std::string](cppItem));
+                    std::size_t subListSize = it->size();
+                    PyObject* subList = PyList_New((int) subListSize);
+                    for (std::size_t j = 0; j &lt; subListSize; ++j) {
+                        std::string cppItem = (*it)[j];
+                        PyList_SET_ITEM(subList, j, %CONVERTTOPYTHON[std::string](cppItem));
+                    }
+                    PyList_SET_ITEM(outList, i, subList);
                 }
-                PyList_SET_ITEM(outList, i, subList);
-                }
 
                 return outList;
             </inject-code>
@@ -1506,6 +1526,7 @@
 
                     for (int j = 0; j &lt; subSize; ++j) {
                         PyObject* pyString = PyList_GET_ITEM(subList,j);
+
                         if ( PyString_Check(pyString) ) {
                             char* buf = PyString_AsString(pyString);
                             if (buf) {
@@ -1554,7 +1575,7 @@
                 double key,value,left,right;
                 %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME(%1, %2,&amp;key,&amp;value, &amp;left, &amp;right);
                 %PYARG_0 = PyTuple_New(5);
-                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[NATRON_NAMESPACE::StatusEnum](%0));
+                PyTuple_SET_ITEM(%PYARG_0, 0, %CONVERTTOPYTHON[bool](%0));
                 PyTuple_SET_ITEM(%PYARG_0, 1, %CONVERTTOPYTHON[double](key));
                 PyTuple_SET_ITEM(%PYARG_0, 2, %CONVERTTOPYTHON[double](value));
                 PyTuple_SET_ITEM(%PYARG_0, 3, %CONVERTTOPYTHON[double](left));
@@ -1562,58 +1583,32 @@
                 return %PYARG_0;
             </inject-code>
         </modify-function>
-        <modify-function signature="getCurveColor(int,ColorTuple&amp;)const">
-            <modify-argument index="2">
-                <remove-argument/>
-            </modify-argument>
-            <modify-argument index="return">
-                <replace-type modified-type="ColorTuple"/>
-            </modify-argument>
-            <inject-code class="target" position="beginning">
-                ColorTuple t;
-                %CPPSELF.%FUNCTION_NAME(%1,t);
-                %PYARG_0 = %CONVERTTOPYTHON[ColorTuple](t);
-                return %PYARG_0;
-            </inject-code>
-        </modify-function>
+
     </object-type>
+
     <object-type name="GroupParam">
         <modify-function signature="setOpened(bool)">
             <inject-code class="target" position="beginning">
                 %CPPSELF.%FUNCTION_NAME(%1);
             </inject-code>
         </modify-function>
-
     </object-type>
-    <object-type name="PageParam">
-    </object-type>
-    
+
+    <object-type name="PageParam"/>
+
     <object-type name="ItemBase">
-        <modify-function signature="getParentLayer()const">
+        <modify-function signature="getParent()const">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
         </modify-function>
-        <modify-function signature="setScriptName(QString)">
-            <inject-code class="target" position="beginning">
-                %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME(%1);
-                %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
-            </inject-code>
-        </modify-function>
-        <modify-function signature="setLabel(QString)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1);
-            </inject-code>
-        </modify-function>
-    </object-type>
-    <object-type name="Layer">
         <modify-function signature="getChildren()const">
             <inject-code class="target" position="beginning">
-                std::list&lt;ItemBase*&gt; items = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
+                std::list&lt;Natron::Python::ItemBase*&gt; items = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
                 PyObject* ret = PyList_New((int) items.size());
                 int idx = 0;
-                for (std::list&lt;ItemBase*&gt;::iterator it = items.begin(); it!=items.end(); ++it,++idx) {
-                PyObject* item = %CONVERTTOPYTHON[ItemBase*](*it);
+                for (std::list&lt;Natron::Python::ItemBase*&gt;::iterator it = items.begin(); it!=items.end(); ++it,++idx) {
+                PyObject* item = %CONVERTTOPYTHON[Natron::Python::ItemBase*](*it);
                 // Ownership transferences.
                 Shiboken::Object::getOwnership(item);
                 PyList_SET_ITEM(ret, idx, item);
@@ -1621,72 +1616,66 @@
                 return ret;
             </inject-code>
         </modify-function>
-        <modify-function signature="addItem(ItemBase*)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1);
-            </inject-code>
+        <modify-function signature="getParam(QString)const">
+            <modify-argument index="return">
+                <define-ownership class="target" owner="target"/>
+            </modify-argument>
         </modify-function>
-        <modify-function signature="insertItem(int,ItemBase*)">
+        <modify-function signature="getParams()const">
             <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1,%2);
+                std::list&lt;Natron::Python::Param*&gt; params = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
+                PyObject* ret = PyList_New((int) params.size());
+                int idx = 0;
+                for (std::list&lt;Natron::Python::Param*&gt;::iterator it = params.begin(); it!=params.end(); ++it,++idx) {
+                PyObject* item = %CONVERTTOPYTHON[Natron::Python::Param*](*it);
+                // Ownership transferences.
+                Shiboken::Object::getOwnership(item);
+                PyList_SET_ITEM(ret, idx, item);
+                }
+                return ret;
             </inject-code>
         </modify-function>
-        <modify-function signature="removeItem(ItemBase*)">
-            <inject-code class="target" position="beginning">
-                %CPPSELF.%FUNCTION_NAME(%1);
-            </inject-code>
-        </modify-function>
     </object-type>
-    <object-type name="BezierCurve">
-        <modify-function signature="getActivatedParam()const">
+
+    <object-type name="ItemsTable">
+        <modify-function signature="getItemByFullyQualifiedScriptName(QString)const">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
         </modify-function>
-        <modify-function signature="getOpacityParam()const">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
+        <modify-function signature="getSelectedItems()const">
+            <inject-code class="target" position="beginning">
+                std::list&lt;Natron::Python::ItemBase*&gt; items = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
+                PyObject* ret = PyList_New((int) items.size());
+                int idx = 0;
+                for (std::list&lt;Natron::Python::ItemBase*&gt;::iterator it = items.begin(); it!=items.end(); ++it,++idx) {
+                PyObject* item = %CONVERTTOPYTHON[Natron::Python::ItemBase*](*it);
+                // Ownership transferences.
+                Shiboken::Object::getOwnership(item);
+                PyList_SET_ITEM(ret, idx, item);
+                }
+                return ret;
+            </inject-code>
         </modify-function>
-        <modify-function signature="getFeatherDistanceParam()const">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
-        </modify-function>
-        <modify-function signature="getFeatherFallOffParam()const">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
-        </modify-function>
-        <modify-function signature="getColorParam()const">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
-        </modify-function>
-        <modify-function signature="getCompositingOperatorParam()const">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
-        </modify-function>
-        <modify-function signature="getKeyframes(std::list&lt;double&gt;*)const">
-            <modify-argument index="1">
-                <remove-argument/>
-            </modify-argument>
-            <modify-argument index="return">
-                <replace-type modified-type="PyList"/>
-            </modify-argument>
+
+        <modify-function signature="getTopLevelItems()const">
             <inject-code class="target" position="beginning">
-                std::list&lt;double&gt; keys;
-                %CPPSELF.%FUNCTION_NAME(&amp;keys);
-                PyObject* ret = PyList_New((int) keys.size());
+                std::list&lt;Natron::Python::ItemBase*&gt; items = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
+                PyObject* ret = PyList_New((int) items.size());
                 int idx = 0;
-                for (std::list&lt;double&gt;::iterator it = keys.begin(); it!=keys.end(); ++it,++idx) {
-                PyList_SET_ITEM(ret, idx, %CONVERTTOPYTHON[double](*it));
+                for (std::list&lt;Natron::Python::ItemBase*&gt;::iterator it = items.begin(); it!=items.end(); ++it,++idx) {
+                PyObject* item = %CONVERTTOPYTHON[Natron::Python::ItemBase*](*it);
+                // Ownership transferences.
+                Shiboken::Object::getOwnership(item);
+                PyList_SET_ITEM(ret, idx, item);
                 }
                 return ret;
             </inject-code>
         </modify-function>
-        <modify-function signature="getControlPointPosition(int,double,double*,double*,double*,double*,double*,double*)const">
+    </object-type>
+
+    <object-type name="BezierCurve">
+        <modify-function signature="getControlPointPosition(int,double,double*,double*,double*,double*,double*,double*,QString)const">
             <modify-argument index="3">
                 <remove-argument/>
             </modify-argument>
@@ -1710,7 +1699,7 @@
             </modify-argument>
             <inject-code class="target" position="beginning">
                 double x,y,rx,ry,lx,ly;
-                %CPPSELF.%FUNCTION_NAME(%1, %2, &amp;x,&amp;y, &amp;lx,&amp;ly,&amp;rx,&amp;ry);
+                %CPPSELF.%FUNCTION_NAME(%1, %2, &amp;x,&amp;y, &amp;lx,&amp;ly,&amp;rx,&amp;ry, %9);
 
                 PyObject* ret = PyTuple_New(6);
                 PyTuple_SET_ITEM(ret, 0, %CONVERTTOPYTHON[double](x));
@@ -1722,7 +1711,7 @@
                 return ret;
             </inject-code>
         </modify-function>
-        <modify-function signature="getFeatherPointPosition(int,double,double*,double*,double*,double*,double*,double*)const">
+        <modify-function signature="getFeatherPointPosition(int,double,double*,double*,double*,double*,double*,double*,QString)const">
             <modify-argument index="3">
                 <remove-argument/>
             </modify-argument>
@@ -1746,7 +1735,7 @@
             </modify-argument>
             <inject-code class="target" position="beginning">
                 double x,y,rx,ry,lx,ly;
-                %CPPSELF.%FUNCTION_NAME(%1, %2, &amp;x,&amp;y, &amp;lx,&amp;ly,&amp;rx,&amp;ry);
+                %CPPSELF.%FUNCTION_NAME(%1, %2, &amp;x,&amp;y, &amp;lx,&amp;ly,&amp;rx,&amp;ry,%9);
 
                 PyObject* ret = PyTuple_New(6);
                 PyTuple_SET_ITEM(ret, 0, %CONVERTTOPYTHON[double](x));
@@ -1760,100 +1749,59 @@
         </modify-function>
 
     </object-type>
-    <object-type name="Track">
-        <modify-function signature="getParam(QString)const">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
-        </modify-function>
-        <modify-function signature="getParams()const">
-            <inject-code class="target" position="beginning">
-                std::list&lt;Param*&gt; params = %CPPSELF.%FUNCTION_NAME(%ARGUMENT_NAMES);
-                PyObject* ret = PyList_New((int) params.size());
-                int idx = 0;
-                for (std::list&lt;Param*&gt;::iterator it = params.begin(); it!=params.end(); ++it,++idx) {
-                PyObject* item = %CONVERTTOPYTHON[Param*](*it);
-                // Ownership transferences.
-                Shiboken::Object::getOwnership(item);
-                PyList_SET_ITEM(ret, idx, item);
-                }
-                return ret;
-            </inject-code>
-        </modify-function>
-    </object-type>
-        
+
+    <object-type name="Track"/>
+
+    <object-type name="StrokePoint"/>
+
     <object-type name="Tracker">
-        <modify-function signature="getTrackByName(QString)const">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
-        </modify-function>
         <modify-function signature="createTrack()">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
         </modify-function>
-        <modify-function signature="getAllTracks(std::list&lt;Track*&gt;*)const">
-            <modify-argument index="1">
-                <remove-argument/>
-            </modify-argument>
-            <modify-argument index="return">
-                <replace-type modified-type="PyList"/>
-            </modify-argument>
+    </object-type>
+
+    <object-type name="StrokeItem">
+        <modify-function signature="getPoints()const">
             <inject-code class="target" position="beginning">
-                std::list&lt;Track*&gt; tracks;
-                %CPPSELF.%FUNCTION_NAME(&amp;tracks);
-                PyObject* ret = PyList_New((int) tracks.size());
-                int idx = 0;
-                for (std::list&lt;Track*&gt;::iterator it = tracks.begin(); it!=tracks.end(); ++it,++idx) {
-                PyObject* item = %CONVERTTOPYTHON[Track*](*it);
-                // Ownership transferences.
-                Shiboken::Object::getOwnership(item);
-                PyList_SET_ITEM(ret, idx, item);
+                std::list&lt;std::list&lt;Natron::Python::StrokePoint&gt; &gt; points = %CPPSELF.%FUNCTION_NAME();
+                PyObject* ret = PyList_New((int) points.size());
+                int i = 0;
+                for (std::list&lt;std::list&lt;Natron::Python::StrokePoint&gt; &gt;::iterator it = points.begin(); it!=points.end(); ++it, ++i) {
+
+
+                    PyObject* subStrokeItemList = PyList_New((int) it->size());
+
+                    int idx = 0;
+                    for (std::list&lt;Natron::Python::StrokePoint&gt;::iterator it2 = it->begin(); it2!=it->end(); ++it2,++idx) {
+                        PyObject* item = %CONVERTTOPYTHON[Natron::Python::StrokePoint](*it);
+                        // Ownership transferences.
+                        PyList_SET_ITEM(subStrokeItemList, idx, item);
+                    }
+                    PyList_SET_ITEM(ret, i, subStrokeItemList);
                 }
                 return ret;
             </inject-code>
-            
         </modify-function>
-        <modify-function signature="getSelectedTracks(std::list&lt;Track*&gt;*)const">
-            <modify-argument index="1">
-                <remove-argument/>
-            </modify-argument>
-            <modify-argument index="return">
-                <replace-type modified-type="PyList"/>
-            </modify-argument>
-            <inject-code class="target" position="beginning">
-                std::list&lt;Track*&gt; tracks;
-                %CPPSELF.%FUNCTION_NAME(&amp;tracks);
-                PyObject* ret = PyList_New((int) tracks.size());
-                int idx = 0;
-                for (std::list&lt;Track*&gt;::iterator it = tracks.begin(); it!=tracks.end(); ++it,++idx) {
-                PyObject* item = %CONVERTTOPYTHON[Track*](*it);
-                // Ownership transferences.
-                Shiboken::Object::getOwnership(item);
-                PyList_SET_ITEM(ret, idx, item);
-                }
-                return ret;
-            </inject-code>
-        </modify-function>
     </object-type>
+
     <object-type name="Roto">
-        <modify-function signature="getBaseLayer()const">
+        <modify-function signature="createLayer()">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
+            <inject-code class="target" position="beginning">
+                %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME();
+                %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
+            </inject-code>
         </modify-function>
-        <modify-function signature="getItemByName(QString)const">
+        <modify-function signature="createStroke(Natron::RotoStrokeType)">
             <modify-argument index="return">
                 <define-ownership class="target" owner="target"/>
             </modify-argument>
-        </modify-function>
-        <modify-function signature="createLayer()">
-            <modify-argument index="return">
-                <define-ownership class="target" owner="target"/>
-            </modify-argument>
             <inject-code class="target" position="beginning">
-                %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME();
+                %RETURN_TYPE %0 = %CPPSELF.%FUNCTION_NAME(%1);
                 %PYARG_0 = %CONVERTTOPYTHON[%RETURN_TYPE](%0);
             </inject-code>
         </modify-function>
@@ -1885,11 +1833,11 @@
             </inject-code>
         </modify-function>
     </object-type>
-    
-    <rejection class="App" field-name="_instance"/>
-    <rejection class="Effect" field-name="_node"/>
-    <rejection class="*" field-name="_imp"/>
-    
+
+    <rejection class="Natron::App" field-name="_instance"/>
+    <rejection class="Natron::Effect" field-name="_node"/>
+    <rejection class="Natron::*" field-name="_imp"/>
+
     <object-type name="PyCoreApplication">
         <modify-function signature="getActiveInstance()const">
             <modify-argument index="return">
@@ -1908,7 +1856,47 @@
         </modify-function>
     </object-type>
 
+    <object-type name="PyOverlayParamDesc"/>
 
+    <object-type name="PyOverlayInteract">
+        <modify-function signature="getSuggestedColor(Natron::Python::ColorTuple*)const">
+            <modify-argument index="return">
+                <replace-type modified-type="PyTuple"/>
+            </modify-argument>
+            <modify-argument index="1">
+                <remove-argument/>
+            </modify-argument>
+            <inject-code class="target" position="beginning">
+                Natron::Python::ColorTuple ret;
+                bool ok = %CPPSELF.%FUNCTION_NAME(&amp;ret);
+                PyObject* pyret = PyTuple_New(5);
+                PyTuple_SET_ITEM(pyret, 0, %CONVERTTOPYTHON[bool](ok));
+                PyTuple_SET_ITEM(pyret, 1, %CONVERTTOPYTHON[double](ret.r));
+                PyTuple_SET_ITEM(pyret, 2, %CONVERTTOPYTHON[double](ret.g));
+                PyTuple_SET_ITEM(pyret, 3, %CONVERTTOPYTHON[double](ret.b));
+                PyTuple_SET_ITEM(pyret, 4, %CONVERTTOPYTHON[double](ret.a));
+                return pyret;
+            </inject-code>
+        </modify-function>
+        <modify-function signature="getHoldingEffect()const">
+            <modify-argument index="return">
+                <define-ownership class="target" owner="target"/>
+            </modify-argument>
+        </modify-function>
+        <modify-function signature="fetchParameter(std::map&lt;QString, QString&gt;,QString,QString,int,bool)const">
+            <modify-argument index="return">
+                <define-ownership class="target" owner="target"/>
+            </modify-argument>
+        </modify-function>
+    </object-type>
+
+    <object-type name="PyPointOverlayInteract"/>
+    <object-type name="PyTransformOverlayInteract"/>
+    <object-type name="PyCornerPinOverlayInteract"/>
+
+</namespace-type>
+
 </typesystem>
+
 
 
