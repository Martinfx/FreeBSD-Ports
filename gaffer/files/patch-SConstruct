--- SConstruct.orig	2025-03-04 09:57:44 UTC
+++ SConstruct
@@ -47,6 +47,7 @@ import codecs
 import tempfile
 import distutils.dir_util
 import codecs
+import string
 
 EnsureSConsVersion( 3, 0, 2 ) # Substfile is a default builder as of 3.0.2
 
@@ -400,11 +401,23 @@ env = Environment(
 
 	CPPPATH = [
 		"include",
+		"/usr/local/include",
+		"/usr/local/include/qt5",
+		"/usr/local/include/python3.11/",
+		"/usr/local/include/Imath/",
+		"/usr/local/include/oneapi/",
+		"/usr/local/include/freetype2",
+		"/usr/local/include/utils",
+		"/usr/local/include/third_party/atomic",
+		"/usr/local/share/openshadinglanguage/shaders",
 		"$LOCATE_DEPENDENCY_CPPPATH",
 	],
 
 	LIBPATH = [
 		"./lib",
+		"/usr/local/lib",
+		"/usr/local/lib/qt5",
+		"/usr/local/lib/qt5/bin",
 		"$BUILD_DIR/lib",
 		"$LOCATE_DEPENDENCY_LIBPATH",
 	],
@@ -424,7 +437,7 @@ for path in [
 		"$BUILD_DIR/include",
 		"$BUILD_DIR/include/Imath",
 		"$BUILD_DIR/include/GL",
-	] + env["LOCATE_DEPENDENCY_SYSTEMPATH"] :
+	] + str.split(env["LOCATE_DEPENDENCY_SYSTEMPATH"]) :
 
 	env.Append(
 		CXXFLAGS = [ systemIncludeArgument, path ]
@@ -459,6 +472,8 @@ if env["PLATFORM"] != "win32" :
 		env.Append( CXXFLAGS = [ "-D__USE_ISOC99" ] )
 		env["GAFFER_PLATFORM"] = "macos"
 
+	if env["PLATFORM"] == "freebsd" :
+		env["GAFFER_PLATFORM"] = "freebsd"
 	else :
 
 		env["GAFFER_PLATFORM"] = "linux"
@@ -823,8 +838,8 @@ boostVersionHeader = baseLibEnv.FindFile(
 boostVersionHeader = baseLibEnv.FindFile(
 	"boost/version.hpp",
 	[ "$BUILD_DIR/include" ] +
-	baseLibEnv["LOCATE_DEPENDENCY_SYSTEMPATH"] +
-	baseLibEnv["LOCATE_DEPENDENCY_CPPPATH"]
+	split(baseLibEnv["LOCATE_DEPENDENCY_SYSTEMPATH"]) +
+	split(baseLibEnv["LOCATE_DEPENDENCY_CPPPATH"])
 )
 
 if not boostVersionHeader :
@@ -858,7 +873,7 @@ basePythonEnv = baseLibEnv.Clone()
 
 basePythonEnv = baseLibEnv.Clone()
 
-pythonExecutable = shutil.which( "python", path = commandEnv["ENV"]["PATH"] )
+pythonExecutable = 'python3.11' #shutil.which( "python3.11", path = commandEnv["ENV"]["PATH"] )
 basePythonEnv["PYTHON_VERSION"] = subprocess.check_output(
 	[ pythonExecutable, "-c", "import sys; print( '{}.{}'.format( *sys.version_info[:2] ) )" ],
 	env=commandEnv["ENV"], universal_newlines=True
@@ -1531,12 +1546,13 @@ for library in ( "GafferUI", ) :
 			libraries[library]["envAppends"]["LIBS"].append( "Qt${QT_VERSION}" + qtLibrary )
 
 for library in ( "GafferUI", ) :
-	addQtLibrary( library, "Core", False )
+	addQtLibrary( library, "Core", False )	
 	addQtLibrary( library, "Gui" )
 	addQtLibrary( library, "OpenGL" )
 	addQtLibrary( library, "Test" )
 	addQtLibrary( library, "Widgets" )
 
+
 # Add required platform-specific libraries
 
 if env["PLATFORM"] == "win32" :
@@ -1768,7 +1784,7 @@ for libraryName, libraryDef in libraries.items() :
 	# command ourselves.
 
 	for sourceFile in libraryDef.get( "mocSourceFiles", [] ) :
-		mocOutput = commandEnv.Command( os.path.splitext( sourceFile )[0] + ".moc", sourceFile, "moc $SOURCE -o $TARGET" )
+		mocOutput = commandEnv.Command( os.path.splitext( sourceFile )[0] + ".moc", sourceFile, "moc-qt5 $SOURCE -o $TARGET" )
 		# Somehow the above leads to a circular dependency between `mocOutput` and itself.
 		# Tell SCons not to worry. The official SCons tool does the same.
 		env.Ignore( mocOutput, mocOutput )
@@ -1827,7 +1843,7 @@ for libraryName, libraryDef in libraries.items() :
 	def buildOSL( target, source, env ) :
 		subprocess.check_call(
 			[
-				shutil.which( "oslc", path = env["ENV"]["PATH"] ) if env["PLATFORM"] == "win32" else "oslc",
+				shutil.which( "/usr/local/bin/oslc", path = env["ENV"]["PATH"] ) if env["PLATFORM"] == "win32" else "oslc",
 				"-I./shaders",
 				"-o",
 				str( target[0] ), str( source[0] )
